import logging
import asyncio
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
import httpx
from telegram.constants import ParseMode
from telegram.error import Conflict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–í–°–¢–ê–í–¨–¢–ï –°–í–û–ò –ó–ù–ê–ß–ï–ù–ò–Ø!)
TOKEN = "7829142639:AAHNhPm0H1L4RTxNWXltrJ_xUZYozGZ6-jY"  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ!
CHAT_ID = "593059857"

class SafeBot:
    def __init__(self):
        self.app = None
        self.should_stop = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        try:
            self.app = Application.builder().token(TOKEN).build()
            self.app.add_handler(CommandHandler("start", self.start))
            self.app.add_handler(CommandHandler("check", self.check_prices))
            return True
        except Conflict:
            logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.")
            return False

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start"""
        await update.message.reply_text(
            "ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–µ–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω"
        )

    async def check_prices(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /check"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å KuCoin
            async with httpx.AsyncClient() as client:
                kucoin_resp = await client.get(
                    "https://api.kucoin.com/api/v1/market/orderbook/level1",
                    params={"symbol": "BTC-USDT"},
                    timeout=10
                )
                kucoin_price = float(kucoin_resp.json()["data"]["price"])

                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å MEXC
                mexc_resp = await client.get(
                    "https://api.mexc.com/api/v3/ticker/price",
                    params={"symbol": "BTCUSDT"},
                    timeout=10
                )
                mexc_price = float(mexc_resp.json()["price"])

            # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
            spread = abs(kucoin_price - mexc_price)
            spread_percent = (spread / ((kucoin_price + mexc_price)/2)) * 100

            await update.message.reply_text(
                f"üìä BTC/USDT:\n"
                f"KuCoin: {kucoin_price:.2f}\n"
                f"MEXC: {mexc_price:.2f}\n"
                f"üîπ –°–ø—Ä–µ–¥: {spread_percent:.2f}%",
                parse_mode=ParseMode.MARKDOWN
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        try:
            if not await self.initialize():
                return

            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            await self.app.run_polling(
                close_loop=False,
                stop_signals=None
            )
        except Exception as e:
            logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    bot = SafeBot()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é event loop –¥–ª—è Render
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(bot.run())
    finally:
        loop.close()

if __name__ == "__main__":
    main()
