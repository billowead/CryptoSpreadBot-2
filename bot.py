import threading
import time
import requests
from flask import Flask, request
from telegram import Bot

TELEGRAM_TOKEN = '7829142639:AAHNhPm0H1L4RTxNWXltrJ_xUZYozGZ6-jY'
CHAT_ID = 593059857

bot = Bot(token=TELEGRAM_TOKEN)
app = Flask(__name__)

def get_price_coingecko():
    try:
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        r = requests.get(url, timeout=5)
        r.raise_for_status()
        price = r.json()['bitcoin']['usd']
        print(f"Coingecko BTC price: {price}")
        return float(price)
    except Exception as e:
        print(f"CoinGecko API error: {e}")
        return None

def get_price_binance():
    try:
        url = "https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT"
        headers = {"User-Agent": "Mozilla/5.0"}  # –ß—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
        r = requests.get(url, headers=headers, timeout=5)
        r.raise_for_status()
        price = float(r.json()['price'])
        print(f"Binance BTC price: {price}")
        return price
    except Exception as e:
        print(f"Binance API error: {e}")
        return None

def monitor_spread():
    THRESHOLD = 0.005  # 0.5%
    print("‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤...")
    while True:
        price1 = get_price_coingecko()
        price2 = get_price_binance()
        if price1 is None or price2 is None:
            print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª.")
            time.sleep(15)
            continue

        spread = abs(price1 - price2) / ((price1 + price2) / 2)
        spread_percent = spread * 100
        print(f"–¢–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {spread_percent:.3f}%")

        if spread >= THRESHOLD:
            msg = (
                f"üö® –°–ü–†–ï–î! BTC:\n"
                f"{spread_percent:.2f}% –º–µ–∂–¥—É Coingecko –∏ Binance\n"
                f"–¶–µ–Ω—ã:\nCoingecko: {price1}\nBinance: {price2}\n"
                f"<a href='https://www.binance.com/en/trade/BTC_USDT'>Binance</a>"
            )
            print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")
            try:
                bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode='HTML')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        time.sleep(15)

@app.route('/webhook', methods=['POST'])
def webhook():
    update = request.get_json()
    print("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", update)
    if 'message' in update and 'text' in update['message']:
        chat_id = update['message']['chat']['id']
        text = update['message']['text']

        if text == '/start':
            bot.send_message(chat_id=chat_id, text="–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–Ω–∏—Ç–æ—Ä—é —Å–ø—Ä–µ–¥—ã –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏. –ñ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
    return 'ok'

def run_flask():
    app.run(host='0.0.0.0', port=10000)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    threading.Thread(target=run_flask).start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_spread()
