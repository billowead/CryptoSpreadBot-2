import logging
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
import httpx
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Ç–æ–∫–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
TOKEN = "7829142639:AAHNhPm0H1L4RTxNWXltrJ_xUZYozGZ6-jY"  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ - —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
CHAT_ID = "593059857"  # –í–∞—à chat_id

# –°–æ–∑–¥–∞–µ–º Application
app = Application.builder().token(TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø—Ä–µ–¥–∞"
    )

async def check_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /check"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã BTC-USDT —Å KuCoin
        async with httpx.AsyncClient() as client:
            kucoin_resp = await client.get(
                "https://api.kucoin.com/api/v1/market/orderbook/level1",
                params={"symbol": "BTC-USDT"},
                timeout=10
            )
            kucoin_price = float(kucoin_resp.json()["data"]["price"])
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã BTC-USDT —Å MEXC
            mexc_resp = await client.get(
                "https://api.mexc.com/api/v3/ticker/price",
                params={"symbol": "BTCUSDT"},
                timeout=10
            )
            mexc_price = float(mexc_resp.json()["price"])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
        spread = abs(kucoin_price - mexc_price)
        spread_percent = (spread / ((kucoin_price + mexc_price)/2)) * 100
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã BTC-USDT:\n"
            f"‚Ä¢ KuCoin: {kucoin_price:.2f} $\n"
            f"‚Ä¢ MEXC: {mexc_price:.2f} $\n"
            f"üîπ –†–∞–∑–Ω–∏—Ü–∞: {spread:.2f} $ ({spread_percent:.2f}%)"
        )
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("check", check_prices))

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
