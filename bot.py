import threading
import time
import requests
from flask import Flask, request
from telegram import Bot

TOKEN = "7829142639:AAHNhPm0H1L4RTxNWXltrJ_xUZYozGZ6-jY"
CHAT_ID = 593059857
SPREAD_THRESHOLD = 0.001  # 0.1%

bot = Bot(token=TOKEN)
app = Flask(__name__)

exchanges = {
    'Binance': 'https://api.binance.com/api/v3/ticker/price?symbol={}',
    'Bybit': 'https://api.bybit.com/v2/public/tickers?symbol={}'
}

pairs = ['BTCUSDT', 'ETHUSDT']  # –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

def get_price_binance(symbol):
    try:
        response = requests.get(exchanges['Binance'].format(symbol))
        data = response.json()
        price = float(data['price'])
        return price
    except Exception as e:
        print(f"[Binance] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
        return None

def get_price_bybit(symbol):
    try:
        # Bybit API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤, –∏—â–µ–º –Ω—É–∂–Ω—ã–π
        response = requests.get(exchanges['Bybit'].format(symbol))
        data = response.json()
        for item in data['result']:
            if item['symbol'] == symbol:
                price = float(item['last_price'])
                return price
        return None
    except Exception as e:
        print(f"[Bybit] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
        return None

def check_spread():
    while True:
        print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–µ–¥–æ–≤ ===")
        for pair in pairs:
            price_binance = get_price_binance(pair)
            price_bybit = get_price_bybit(pair)
            print(f"–ü–∞—Ä–∞ {pair} - Binance: {price_binance}, Bybit: {price_bybit}")
            if price_binance and price_bybit:
                diff = abs(price_binance - price_bybit)
                avg = (price_binance + price_bybit) / 2
                spread = diff / avg
                spread_percent = spread * 100
                print(f"–°–ø—Ä–µ–¥: {spread_percent:.4f}%")
                if spread >= SPREAD_THRESHOLD:
                    msg = (
                        f"üö® –°–ü–†–ï–î! {pair}: {spread_percent:.2f}% –º–µ–∂–¥—É "
                        f"Binance –∏ Bybit\n"
                        f"Binance: {price_binance}\n"
                        f"Bybit: {price_bybit}\n"
                        f"https://www.binance.com/en/trade/{pair}\n"
                        f"https://www.bybit.com/trade/{pair}"
                    )
                    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n{msg}")
                    try:
                        bot.send_message(chat_id=CHAT_ID, text=msg)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è {pair}")
        print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥... ===\n")
        time.sleep(60)

@app.route('/webhook', methods=['POST'])
def webhook():
    update = request.get_json()
    if 'message' in update and 'text' in update['message']:
        chat_id = update['message']['chat']['id']
        text = update['message']['text'].lower()
        if text == '/start':
            bot.send_message(chat_id=chat_id, text="–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–Ω–∏—Ç–æ—Ä—é —Å–ø—Ä–µ–¥—ã –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–ø—Ä–µ–¥ –±—É–¥–µ—Ç –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞, —è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
    return 'ok'

if __name__ == '__main__':
    thread = threading.Thread(target=check_spread)
    thread.daemon = True
    thread.start()
    app.run(host='0.0.0.0', port=10000)
