import logging
import asyncio
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
import httpx
from telegram.constants import ParseMode

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7829142639:AAHNhPm0H1L4RTxNWXltrJ_xUZYozGZ6-jY"
CHAT_ID = "593059857"
CHECK_INTERVAL = 60
SPREAD_THRESHOLD = 2.0

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
PAIRS = ["BTC-USDT", "ETH-USDT"]

# API –±–∏—Ä–∂
EXCHANGES = {
    "kucoin": {
        "url": "https://api.kucoin.com/api/v1/market/orderbook/level1",
        "params": lambda p: {"symbol": p},
        "price_path": ["data", "price"]
    },
    "mexc": {
        "url": "https://api.mexc.com/api/v3/ticker/price",
        "params": lambda p: {"symbol": p.replace("-", "")},
        "price_path": ["price"]
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SpreadMonitorBot:
    def __init__(self):
        self.app = Application.builder().token(TELEGRAM_TOKEN).build()
        self.active_chats = set()
        self.bot = self.app.bot
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("check", self.manual_check))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        self.app.job_queue.run_repeating(
            self.monitor_spread,
            interval=CHECK_INTERVAL,
            first=10
        )

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.effective_chat.id
        self.active_chats.add(chat_id)
        await context.bot.send_message(
            chat_id=chat_id,
            text="üöÄ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–µ–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                 "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ —Å–ø—Ä–µ–¥ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç 2%.\n"
                 "–ö–æ–º–∞–Ω–¥–∞ /check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å"
        )

    async def manual_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
        chat_id = update.effective_chat.id
        await context.bot.send_message(
            chat_id=chat_id,
            text="üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–µ —Å–ø—Ä–µ–¥—ã..."
        )
        await self.check_and_notify(chat_id)

    async def fetch_price(self, exchange: str, pair: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –±–∏—Ä–∂–∏"""
        try:
            config = EXCHANGES[exchange]
            params = config["params"](pair)
            
            async with httpx.AsyncClient() as client:
                resp = await client.get(
                    config["url"],
                    params=params,
                    timeout=10
                )
                
                if resp.status_code != 200:
                    logger.warning(f"{exchange} status {resp.status_code} for {pair}")
                    return None
                    
                data = resp.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                price = data
                for key in config["price_path"]:
                    if isinstance(key, int):
                        if len(price) <= key:
                            return None
                        price = price[key]
                    else:
                        price = price.get(key)
                        if price is None:
                            return None
                
                return float(price)
                
        except Exception as e:
            logger.error(f"Error fetching {pair} from {exchange}: {str(e)}")
            return None

    async def check_spread(self, pair: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã"""
        prices = {}
        
        for exchange in EXCHANGES:
            price = await self.fetch_price(exchange, pair)
            if price is not None:
                prices[exchange] = price
                logger.info(f"{exchange} {pair}: {price:.2f}")
        
        if len(prices) < 2:
            return None
            
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
        exchanges = list(prices.keys())
        max_spread = 0
        best_pair = None
        
        for i in range(len(exchanges)):
            for j in range(i+1, len(exchanges)):
                spread = abs(prices[exchanges[i]] - prices[exchanges[j]])
                spread_percent = (spread / ((prices[exchanges[i]] + prices[exchanges[j]])/2)) * 100
                
                if spread_percent > max_spread:
                    max_spread = spread_percent
                    best_pair = (exchanges[i], exchanges[j])
        
        if max_spread >= SPREAD_THRESHOLD:
            return {
                "pair": pair,
                "spread": max_spread,
                "exchanges": best_pair,
                "prices": {
                    best_pair[0]: prices[best_pair[0]],
                    best_pair[1]: prices[best_pair[1]]
                }
            }
        return None

    async def send_notification(self, chat_id: int, result: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø—Ä–µ–¥–µ"""
        exch1, exch2 = result["exchanges"]
        msg = (
            f"üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø—Ä–µ–¥ {result['spread']:.2f}%*\n\n"
            f"üìä *–ü–∞—Ä–∞*: {result['pair']}\n"
            f"üîπ *{exch1.upper()}*: {result['prices'][exch1]:.2f}\n"
            f"üî∏ *{exch2.upper()}*: {result['prices'][exch2]:.2f}\n\n"
            f"üíµ –†–∞–∑–Ω–∏—Ü–∞: {abs(result['prices'][exch1] - result['prices'][exch2]):.2f} USDT"
        )
        
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=msg,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {str(e)}")

    async def check_and_notify(self, chat_id: int = None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        for pair in PAIRS:
            result = await self.check_spread(pair)
            if result:
                if chat_id:
                    await self.send_notification(chat_id, result)
                else:
                    for active_chat in self.active_chats:
                        await self.send_notification(active_chat, result)

    async def monitor_spread(self, context: ContextTypes.DEFAULT_TYPE):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        await self.check_and_notify()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting spread monitor bot...")
        self.app.run_polling()

if __name__ == "__main__":
    try:
        bot = SpreadMonitorBot()
        bot.run()
    except Exception as e:
        logger.error(f"Fatal error: {str(e)}")
