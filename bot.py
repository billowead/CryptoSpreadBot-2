import logging
import asyncio
from telegram import Bot
import httpx
from aiohttp import web  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
BOT_TOKEN = "7829142639:AAHNhPm0H1L4RTxNWXltrJ_xUZYozGZ6-jY"
CHAT_ID = 593059857
PORT = 10000  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è Render
CHECK_INTERVAL = 60

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ URL)
EXCHANGES = {
    "kucoin": {
        "url": "https://api.kucoin.com/api/v1/market/orderbook/level1",
        "params": {"symbol": "BTC-USDT"},  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        "price_key": ["data", "price"]
    },
    "mexc": {
        "url": "https://api.mexc.com/api/v3/ticker/price",
        "params": {"symbol": "BTCUSDT"},
        "price_key": ["price"]
    }
}

bot = Bot(token=BOT_TOKEN)

async def health_check(request):
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return web.Response(text="Bot is running")

async def fetch_price(exchange):
    """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                EXCHANGES[exchange]["url"],
                params=EXCHANGES[exchange]["params"],
                headers={"User-Agent": "Mozilla/5.0"},
                timeout=10
            )
            response.raise_for_status()
            data = response.json()
            
            price = data
            for key in EXCHANGES[exchange]["price_key"]:
                price = price[key]
                
            return float(price)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ {exchange}: {str(e)}")
        return None

async def check_spread():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–µ–¥ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏"""
    prices = {}
    for exchange in EXCHANGES:
        price = await fetch_price(exchange)
        if price:
            prices[exchange] = price
            if len(prices) >= 2:
                break
    
    if len(prices) >= 2:
        exchange1, exchange2 = prices.keys()
        price1, price2 = prices.values()
        
        spread = abs(price1 - price2)
        spread_percent = (spread / ((price1 + price2) / 2)) * 100

        if spread_percent >= 2:
            msg = (
                f"üöÄ *–°–ø—Ä–µ–¥ {spread_percent:.2f}%*\n\n"
                f"‚Ä¢ {exchange1}: {price1:.2f}\n"
                f"‚Ä¢ {exchange2}: {price2:.2f}\n"
                f"üíé –†–∞–∑–Ω–∏—Ü–∞: {spread:.2f} USD"
            )
            await bot.send_message(
                chat_id=CHAT_ID,
                text=msg,
                parse_mode="Markdown"
            )

async def background_task(app):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø—Ä–µ–¥–∞"""
    while True:
        await check_spread()
        await asyncio.sleep(CHECK_INTERVAL)

async def start_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    app.add_routes([web.get('/', health_check)])
    app.on_startup.append(lambda app: asyncio.create_task(background_task(app)))
    return app

if __name__ == "__main__":
    try:
        logger.info(f"üöÄ Starting bot on port {PORT}")
        app = asyncio.run(start_app())
        web.run_app(app, host='0.0.0.0', port=PORT)
    except Exception as e:
        logger.error(f"Fatal error: {str(e)}")
