import os
import logging
import pytz
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters
from apscheduler.schedulers.background import BackgroundScheduler
import requests

# –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
TOKEN = "—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_–æ—Ç_—Ç–µ–ª–µ–≥—Ä–∞–º_–±–æ—Ç–∞"
CHAT_ID = —Ç–≤–æ–π_—á–∞—Ç_id_—Ü–µ–ª—ã–º_—á–∏—Å–ª–æ–º  # –Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789
PORT = int(os.environ.get("PORT", 10001))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
app = Flask(__name__)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø—Ä–µ–¥–∞ (–ø—Ä–∏–º–µ—Ä)
def check_spread():
    try:
        # –ü—Ä–∏–º–µ—Ä: –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω —Å –¥–≤—É—Ö –±–∏—Ä–∂ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ API)
        binance_price = float(requests.get("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT").json()["price"])
        bybit_price = float(requests.get("https://api.bybit.com/v2/public/tickers?symbol=BTCUSDT").json()["result"][0]["last_price"])
        
        spread = abs(binance_price - bybit_price) / ((binance_price + bybit_price) / 2) * 100

        logging.info(f"Spread: {spread:.2f}%")

        threshold = 2.0  # –ü–æ—Ä–æ–≥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö

        if spread > threshold:
            message = (
                f"üö® –°–ø—Ä–µ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ {threshold}%!\n"
                f"Binance: {binance_price:.2f} USD\n"
                f"Bybit: {bybit_price:.2f} USD\n"
                f"–°–ø—Ä–µ–¥: {spread:.2f}%"
            )
            bot.send_message(chat_id=CHAT_ID, text=message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø—Ä–µ–¥–∞: {e}")

# –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã /start
def start(update, context):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–Ω–∏—Ç–æ—Ä—é —Å–ø—Ä–µ–¥—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram dispatcher –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
dispatcher = Dispatcher(bot, None, workers=0, use_context=True)
dispatcher.add_handler(CommandHandler("start", start))

# Flask endpoint –¥–ª—è webhook (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
@app.route("/", methods=["GET", "POST"])
def webhook():
    if request.method == "POST":
        update = Update.de_json(request.get_json(force=True), bot)
        dispatcher.process_update(update)
        return "ok"
    else:
        return "Bot is running"

if __name__ == "__main__":
    print("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–µ–¥–æ–≤...")

    scheduler = BackgroundScheduler(timezone=pytz.utc)
    scheduler.add_job(check_spread, "interval", seconds=20)
    scheduler.start()

    app.run(host="0.0.0.0", port=PORT)
