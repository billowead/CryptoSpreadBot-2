import logging
import asyncio
from telegram import Bot
import httpx
from telegram.constants import ParseMode

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7829142639:AAHNhPm0H1L4RTxNWXltrJ_xUZYozGZ6-jY"
CHAT_ID = "593059857"
CHECK_INTERVAL = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
SPREAD_THRESHOLD = 2.0  # –ü–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (2%)
REQUEST_DELAY = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏ —Å—Å—ã–ª–∫–∏
PAIRS = {
    "BTC-USDT": {
        "kucoin": "https://www.kucoin.com/trade/BTC-USDT",
        "mexc": "https://www.mexc.com/exchange/BTC_USDT",
        "bybit": "https://www.bybit.com/trade/usdt/BTCUSDT"
    },
    "ETH-USDT": {
        "kucoin": "https://www.kucoin.com/trade/ETH-USDT",
        "mexc": "https://www.mexc.com/exchange/ETH_USDT",
        "bybit": "https://www.bybit.com/trade/usdt/ETHUSDT"
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# API –±–∏—Ä–∂
EXCHANGES = {
    "kucoin": {
        "url": "https://api.kucoin.com/api/v1/market/orderbook/level1",
        "price_key": ["data", "price"]
    },
    "mexc": {
        "url": "https://api.mexc.com/api/v3/ticker/price",
        "price_key": ["price"]
    },
    "bybit": {
        "url": "https://api.bybit.com/v2/public/tickers",
        "price_key": ["result", 0, "last_price"]
    }
}

bot = Bot(token=TELEGRAM_TOKEN)

async def get_price(exchange: str, pair: str) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –¥–ª—è –ø–∞—Ä—ã –Ω–∞ –±–∏—Ä–∂–µ"""
    try:
        config = EXCHANGES[exchange]
        params = {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        if exchange == "mexc":
            params["symbol"] = pair.replace("-", "_")
        elif exchange == "bybit":
            params["symbol"] = pair.replace("-", "")
        else:  # KuCoin
            params["symbol"] = pair

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {"User-Agent": "Mozilla/5.0"}
        
        async with httpx.AsyncClient() as client:
            await asyncio.sleep(REQUEST_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            resp = await client.get(
                config["url"],
                params=params,
                headers=headers,
                timeout=15
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"{exchange} response: {resp.text}")
            
            if resp.status_code != 200:
                logger.warning(f"{exchange} –≤–µ—Ä–Ω—É–ª {resp.status_code} –¥–ª—è {pair}")
                return None
                
            data = resp.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
            price = data
            for key in config["price_key"]:
                if isinstance(key, int):
                    if len(price) <= key:
                        return None
                    price = price[key]
                else:
                    price = price.get(key)
                    if price is None:
                        return None
            
            return float(price)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ {exchange} ({pair}): {str(e)}")
        return None

async def monitor_spread():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏"""
    while True:
        try:
            for pair, urls in PAIRS.items():
                prices = {}
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂
                for exchange in EXCHANGES:
                    price = await get_price(exchange, pair)
                    if price is not None:
                        prices[exchange] = price
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–µ —Ü–µ–Ω—ã
                if len(prices) >= 2:
                    max_spread = 0
                    best_pair = None
                    
                    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
                    exchanges = list(prices.keys())
                    for i in range(len(exchanges)):
                        for j in range(i+1, len(exchanges)):
                            spread = abs(prices[exchanges[i]] - prices[exchanges[j]])
                            spread_percent = (spread / ((prices[exchanges[i]] + prices[exchanges[j]])/2)) * 100
                            
                            if spread_percent > max_spread:
                                max_spread = spread_percent
                                best_pair = (exchanges[i], exchanges[j])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ø—Ä–µ–¥ –ø—Ä–µ–≤—ã—Å–∏–ª –ø–æ—Ä–æ–≥
                    if max_spread >= SPREAD_THRESHOLD:
                        exch1, exch2 = best_pair
                        spread_abs = abs(prices[exch1] - prices[exch2])
                        
                        message = (
                            f"üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø—Ä–µ–¥ {max_spread:.2f}%*\n\n"
                            f"üìä *–ü–∞—Ä–∞*: {pair}\n"
                            f"üîπ *{exch1.upper()}*: [–ö—É–ø–∏—Ç—å]({urls[exch1]}) - {prices[exch1]:.2f}\n"
                            f"üî∏ *{exch2.upper()}*: [–ö—É–ø–∏—Ç—å]({urls[exch2]}) - {prices[exch2]:.2f}\n\n"
                            f"üíµ *–ê–±—Å–æ–ª—é—Ç–Ω—ã–π —Å–ø—Ä–µ–¥*: {spread_abs:.2f} USDT"
                        )
                        
                        await bot.send_message(
                            chat_id=CHAT_ID,
                            text=message,
                            parse_mode=ParseMode.MARKDOWN,
                            disable_web_page_preview=True
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {pair}: —Å–ø—Ä–µ–¥ {max_spread:.2f}%")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {str(e)}")
        
        await asyncio.sleep(CHECK_INTERVAL)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üü¢ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–µ–¥–∞ –∑–∞–ø—É—â–µ–Ω")
    try:
        await monitor_spread()
    except asyncio.CancelledError:
        logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
