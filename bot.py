import os
import logging
import asyncio
from telegram import Bot
import httpx

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
PORT = int(os.environ.get('PORT', 10000))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000
CHECK_INTERVAL = 60

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
API_CONFIG = {
    "kucoin": {
        "url": "https://api.kucoin.com/api/v1/market/orderbook/level1",
        "params": {"symbol": "BTC-USDT"},  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        "price_key": ["data", "price"],
        "trade_url": "https://www.kucoin.com/trade/BTC-USDT"
    },
    "huobi": {
        "url": "https://api.huobi.pro/market/detail/merged",
        "params": {"symbol": "btcusdt"},
        "price_key": ["tick", "close"],
        "trade_url": "https://www.huobi.com/en-us/exchange/btc_usdt"
    }
}

bot = Bot(token=TOKEN)

async def get_price(exchange: str):
    try:
        config = API_CONFIG[exchange]
        async with httpx.AsyncClient(timeout=10.0) as client:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            response = await client.get(
                config["url"],
                params=config["params"],  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                headers={"User-Agent": "Mozilla/5.0"}
            )
            
            if response.status_code != 200:
                logger.warning(f"{exchange} status: {response.status_code}")
                return None
                
            data = response.json()
            price = data
            for key in config["price_key"]:
                price = price[key]
            return float(price)
            
    except Exception as e:
        logger.error(f"Error getting {exchange} price: {str(e)}")
        return None

async def check_spread():
    prices = {}
    for exchange in API_CONFIG:
        price = await get_price(exchange)
        if price is not None:
            prices[exchange] = price
            if len(prices) >= 2:
                break
    
    if len(prices) >= 2:
        exchanges = list(prices.keys())
        spread = abs(prices[exchanges[0]] - prices[exchanges[1]])
        spread_percent = (spread / ((prices[exchanges[0]] + prices[exchanges[1]]) / 2)) * 100

        if spread_percent >= 2:
            msg = (
                "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø—Ä–µ–¥ BTC/USDT > 2%\n\n"
                f"üìä {exchanges[0]}: {prices[exchanges[0]]:.2f} USDT\n"
                f"üìä {exchanges[1]}: {prices[exchanges[1]]:.2f} USDT\n"
                f"üí∞ –†–∞–∑–Ω–∏—Ü–∞: {spread:.2f} USDT ({spread_percent:.2f}%)\n\n"
                f"üîó {exchanges[0]}: {API_CONFIG[exchanges[0]]['trade_url']}\n"
                f"üîó {exchanges[1]}: {API_CONFIG[exchanges[1]]['trade_url']}"
            )
            try:
                await bot.send_message(chat_id=CHAT_ID, text=msg)
                logger.info(f"–°–ø—Ä–µ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {spread_percent:.2f}%")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

async def run_scheduler():
    while True:
        await check_spread()
        await asyncio.sleep(CHECK_INTERVAL)

async def main():
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞ –¥–ª—è Render
    await asyncio.sleep(1)
    await run_scheduler()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
