import os
import logging
import asyncio
from telegram import Bot
import httpx

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7829142639:AAHNhPm0H1L4RTxNWXltrJ_xUZYozGZ6-jY"
CHAT_ID = 593059857
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = f"https://cryptospreadbot-2-2.onrender.com/{TOKEN}"
CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API (–æ—Å–Ω–æ–≤–Ω—ã–µ + —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ)
API_CONFIG = {
    "binance": {
        "url": "https://api1.binance.com/api/v3/ticker/price",
        "params": {"symbol": "BTCUSDT"},
        "price_key": ["price"],
        "headers": {"User-Agent": "Mozilla/5.0"}
    },
    "bybit": {
        "url": "https://api.bytick.com/v2/public/tickers",
        "params": {"symbol": "BTCUSDT"},
        "price_key": ["result", 0, "last_price"],
        "headers": {"User-Agent": "Mozilla/5.0"}
    },
    "kucoin": {
        "url": "https://api.kucoin.com/api/v1/market/orderbook/level1",
        "params": {"symbol": "BTC-USDT"},
        "price_key": ["data", "price"],
        "headers": {"Accept": "application/json"}
    },
    "huobi": {
        "url": "https://api.huobi.pro/market/detail/merged",
        "params": {"symbol": "btcusdt"},
        "price_key": ["tick", "close"],
        "headers": {"User-Agent": "Mozilla/5.0"}
    }
}

bot = Bot(token=TOKEN)

async def get_price(exchange: str):
    """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∏—Ä–∂–∏"""
    try:
        config = API_CONFIG[exchange]
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(
                config["url"],
                params=config["params"],
                headers=config.get("headers", {})
            )
            
            if response.status_code != 200:
                logger.warning(f"{exchange} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return None
                
            data = response.json()
            
            # –î–æ—Å—Ç–∞–µ–º —Ü–µ–Ω—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
            price = data
            for key in config["price_key"]:
                if isinstance(price, (list, tuple)) and isinstance(key, int):
                    if len(price) <= key:
                        return None
                elif isinstance(price, dict) and key not in price:
                    return None
                price = price[key]
                
            return float(price)
            
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange}: {str(e)}")
    except (ValueError, KeyError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç {exchange}: {str(e)}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {exchange}: {str(e)}")
    
    return None

async def check_spread():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–µ–¥ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏"""
    prices = {}
    priority_exchanges = ["binance", "bybit"]  # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –±–∏—Ä–∂
    for exchange in priority_exchanges:
        price = await get_price(exchange)
        if price is not None:
            prices[exchange] = price
            if len(prices) >= 2:  # –ù–∞—à–ª–∏ –¥–≤–µ —Ü–µ–Ω—ã - –º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å
                break
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –±–∏—Ä–∂–∏
    if len(prices) < 2:
        for exchange in [e for e in API_CONFIG.keys() if e not in priority_exchanges]:
            price = await get_price(exchange)
            if price is not None:
                prices[exchange] = price
                if len(prices) >= 2:
                    break
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –¥–≤–µ —Ü–µ–Ω—ã
    if len(prices) >= 2:
        exchanges = list(prices.keys())
        spread = abs(prices[exchanges[0]] - prices[exchanges[1]])
        spread_percent = (spread / ((prices[exchanges[0]] + prices[exchanges[1]]) / 2)) * 100

        if spread_percent >= 2:  # –ü–æ—Ä–æ–≥ 2%
            msg = (
                f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø—Ä–µ–¥ BTC/USDT > 2%\n\n"
                f"üìä {exchanges[0]}: {prices[exchanges[0]]:.2f} USDT\n"
                f"üìä {exchanges[1]}: {prices[exchanges[1]]:.2f} USDT\n"
                f"üí∞ –†–∞–∑–Ω–∏—Ü–∞: {spread:.2f} USDT ({spread_percent:.2f}%)\n\n"
                f"
