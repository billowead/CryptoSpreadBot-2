import requests
import threading
import time
from flask import Flask, request
from telegram import Bot

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = '7829142639:AAHNhPm0H1L4RTxNWXltrJ_xUZYozGZ6-jY'  # —Ç–≤–æ–π —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
CHAT_ID = 593059857  # —Ç–≤–æ–π chat_id –≤ Telegram
PORT = 10000
threshold = 0.01  # –ø–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ 1% (0.01)

# –ü–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
pairs = ['BTC/USDT', 'ETH/USDT']

# –ë–∏—Ä–∂–∏ –∏ –∏—Ö API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã (Binance –∏ Bybit)
exchanges = {
    'Binance': 'https://api.binance.com/api/v3/ticker/price?symbol=',
    'Bybit': 'https://api.bybit.com/v2/public/tickers?symbol='
}

app = Flask(__name__)
bot = Bot(token=TOKEN)

def get_ticker(url, pair):
    symbol = pair.replace('/', '')
    try:
        if 'binance' in url:
            r = requests.get(url + symbol)
            r.raise_for_status()
            data = r.json()
            return float(data['price'])
        elif 'bybit' in url:
            r = requests.get(url + symbol)
            r.raise_for_status()
            data = r.json()
            if data['ret_msg'] == 'OK' and data['result']:
                return float(data['result'][0]['last_price'])
            else:
                return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url} –¥–ª—è {pair}: {e}")
        return None

def send_message(text):
    try:
        bot.send_message(chat_id=CHAT_ID, text=text, parse_mode='HTML', disable_web_page_preview=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def check_spreads():
    while True:
        print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–µ–¥–æ–≤ ===")
        for pair in pairs:
            try:
                prices = {}
                for exchange, url in exchanges.items():
                    price = get_ticker(url, pair)
                    if price is not None:
                        prices[exchange] = price
                if len(prices) < 2:
                    print(f"–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                    continue

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –±–∏—Ä–∂
                for ex1 in prices:
                    for ex2 in prices:
                        if ex1 == ex2:
                            continue
                        price1 = prices[ex1]
                        price2 = prices[ex2]
                        spread = abs(price1 - price2) / min(price1, price2)
                        spread_percent = spread * 100
                        print(f"–°–ø—Ä–µ–¥ {pair} –º–µ–∂–¥—É {ex1} –∏ {ex2}: {spread_percent:.4f}% (—Ü–µ–Ω—ã {price1} / {price2})")

                        if spread >= threshold:
                            msg = (f"üö® <b>–°–ü–†–ï–î!</b> {pair}: {spread_percent:.2f}% –º–µ–∂–¥—É {ex1} –∏ {ex2}\n"
                                   f"<a href='https://www.{ex1.lower()}.com/trade/{symbol_to_url(pair)}'>{ex1}</a>\n"
                                   f"<a href='https://www.{ex2.lower()}.com/trade/{symbol_to_url(pair)}'>{ex2}</a>")
                            send_message(msg)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {pair}: {e}")

        time.sleep(60)  # –ø–∞—É–∑–∞ 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

def symbol_to_url(pair):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BTC/USDT -> btcusdt –¥–ª—è —Å—Å—ã–ª–∫–∏
    return pair.replace('/', '').lower()

@app.route('/webhook', methods=['POST'])
def webhook():
    update = request.get_json()
    if 'message' in update:
        chat_id = update['message']['chat']['id']
        text = update['message'].get('text', '')

        if text == '/start':
            send_message("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–Ω–∏—Ç–æ—Ä—é —Å–ø—Ä–µ–¥—ã –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–ø—Ä–µ–¥ –±—É–¥–µ—Ç –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞, —è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
        else:
            send_message("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    return 'ok'

if __name__ == '__main__':
    threading.Thread(target=check_spreads, daemon=True).start()
    app.run(host='0.0.0.0', port=PORT)
